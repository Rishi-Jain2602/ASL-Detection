{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":29550,"sourceType":"datasetVersion","datasetId":23079}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# import data processing and visualisation libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# import image processing libraries\nimport cv2\nimport skimage\nfrom skimage.transform import resize\n\n# import tensorflow and keras\nimport tensorflow as tf\nfrom tensorflow import keras\nimport os","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:18:17.156652Z","iopub.execute_input":"2024-08-10T19:18:17.157020Z","iopub.status.idle":"2024-08-10T19:18:17.164145Z","shell.execute_reply.started":"2024-08-10T19:18:17.156992Z","shell.execute_reply":"2024-08-10T19:18:17.163178Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"train_dir = '/kaggle/input/asl-alphabet/asl_alphabet_train/asl_alphabet_train'\nbatch_size = 64\nimageSize = 64\nnum_classes = 29\n\n# Adjust this based on the actual number of images if known or dynamically calculate it\ntrain_len = 87000  \n\ndef get_data(folder):\n    X = np.empty((train_len, imageSize, imageSize, 3), dtype=np.float32)\n    y = np.empty((train_len,), dtype=np.int32)\n    cnt = 0\n    class_map = {folder_name: idx for idx, folder_name in enumerate(sorted(os.listdir(folder))) if not folder_name.startswith('.')}\n    \n    for folderName in class_map:\n        label = class_map[folderName]\n        folder_path = os.path.join(folder, folderName)\n        for image_filename in os.listdir(folder_path):\n            img_file = cv2.imread(os.path.join(folder_path, image_filename))\n            if img_file is not None:\n                img_file = cv2.resize(img_file, (imageSize, imageSize))\n                X[cnt] = img_file / 255.0  # Normalizing the image\n                y[cnt] = label\n                cnt += 1\n                \n    return X[:cnt], y[:cnt]  # Slice to remove unused preallocated space\n\nX_data, Y_data = get_data(train_dir)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:18:17.704707Z","iopub.execute_input":"2024-08-10T19:18:17.705605Z","iopub.status.idle":"2024-08-10T19:29:38.237406Z","shell.execute_reply.started":"2024-08-10T19:18:17.705572Z","shell.execute_reply":"2024-08-10T19:29:38.236346Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"print(X_data.shape,Y_data.shape)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:29:38.239075Z","iopub.execute_input":"2024-08-10T19:29:38.239383Z","iopub.status.idle":"2024-08-10T19:29:38.244195Z","shell.execute_reply.started":"2024-08-10T19:29:38.239358Z","shell.execute_reply":"2024-08-10T19:29:38.243365Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"(87000, 64, 64, 3) (87000,)\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X_data,Y_data,test_size = 0.3,random_state = 42,stratify = Y_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:29:38.245389Z","iopub.execute_input":"2024-08-10T19:29:38.245718Z","iopub.status.idle":"2024-08-10T19:29:39.478817Z","shell.execute_reply.started":"2024-08-10T19:29:38.245693Z","shell.execute_reply":"2024-08-10T19:29:39.478017Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"from keras.utils import to_categorical\nY_train = to_categorical(Y_train,29)\nY_test = to_categorical(Y_test,29)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:29:39.481328Z","iopub.execute_input":"2024-08-10T19:29:39.482011Z","iopub.status.idle":"2024-08-10T19:29:39.498438Z","shell.execute_reply.started":"2024-08-10T19:29:39.481970Z","shell.execute_reply":"2024-08-10T19:29:39.497689Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"del X_data,Y_data","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:29:57.881042Z","iopub.execute_input":"2024-08-10T19:29:57.881982Z","iopub.status.idle":"2024-08-10T19:29:57.920039Z","shell.execute_reply.started":"2024-08-10T19:29:57.881947Z","shell.execute_reply":"2024-08-10T19:29:57.918859Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":47,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[47], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mdel\u001b[39;00m X_data,Y_data\n","\u001b[0;31mNameError\u001b[0m: name 'X_data' is not defined"],"ename":"NameError","evalue":"name 'X_data' is not defined","output_type":"error"}]},{"cell_type":"code","source":"from keras.models import Sequential\nfrom keras.layers import Conv2D,Dense,Flatten,MaxPooling2D,Activation","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:30:04.181571Z","iopub.execute_input":"2024-08-10T19:30:04.182723Z","iopub.status.idle":"2024-08-10T19:30:04.188070Z","shell.execute_reply.started":"2024-08-10T19:30:04.182691Z","shell.execute_reply":"2024-08-10T19:30:04.187256Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"model = Sequential()\n\nmodel.add(Conv2D(32, (5, 5), input_shape=(64, 64, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128, activation='relu'))\n\nmodel.add(Dense(29, activation='softmax'))\n\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:30:05.225830Z","iopub.execute_input":"2024-08-10T19:30:05.226480Z","iopub.status.idle":"2024-08-10T19:30:06.030678Z","shell.execute_reply.started":"2024-08-10T19:30:05.226448Z","shell.execute_reply":"2024-08-10T19:30:06.029794Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │         \u001b[38;5;34m2,432\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ activation (\u001b[38;5;33mActivation\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ activation_1 (\u001b[38;5;33mActivation\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m36,928\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ activation_2 (\u001b[38;5;33mActivation\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2304\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │       \u001b[38;5;34m295,040\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m29\u001b[0m)             │         \u001b[38;5;34m3,741\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,432</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ activation (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ activation_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ activation_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2304</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,040</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">29</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">3,741</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m356,637\u001b[0m (1.36 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">356,637</span> (1.36 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m356,637\u001b[0m (1.36 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">356,637</span> (1.36 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss',patience=2)\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nhist = model.fit(X_train,Y_train,epochs = 50,batch_size = 64,verbose = 2,validation_data = (X_test,Y_test),callbacks = [early_stop])","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:30:13.133101Z","iopub.execute_input":"2024-08-10T19:30:13.133843Z","iopub.status.idle":"2024-08-10T19:31:22.852499Z","shell.execute_reply.started":"2024-08-10T19:30:13.133811Z","shell.execute_reply":"2024-08-10T19:31:22.851610Z"},"trusted":true},"execution_count":50,"outputs":[{"name":"stdout","text":"Epoch 1/50\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1723318224.762955     738 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\nW0000 00:00:1723318224.782773     738 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\nW0000 00:00:1723318235.549343     738 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"952/952 - 18s - 19ms/step - accuracy: 0.7246 - loss: 0.9207 - val_accuracy: 0.9310 - val_loss: 0.2084\nEpoch 2/50\n952/952 - 6s - 7ms/step - accuracy: 0.9554 - loss: 0.1352 - val_accuracy: 0.9703 - val_loss: 0.0922\nEpoch 3/50\n952/952 - 7s - 7ms/step - accuracy: 0.9744 - loss: 0.0774 - val_accuracy: 0.9664 - val_loss: 0.1084\nEpoch 4/50\n952/952 - 6s - 7ms/step - accuracy: 0.9823 - loss: 0.0548 - val_accuracy: 0.9818 - val_loss: 0.0575\nEpoch 5/50\n952/952 - 7s - 7ms/step - accuracy: 0.9808 - loss: 0.0640 - val_accuracy: 0.9597 - val_loss: 0.1494\nEpoch 6/50\n952/952 - 6s - 7ms/step - accuracy: 0.9844 - loss: 0.0537 - val_accuracy: 0.9921 - val_loss: 0.0256\nEpoch 7/50\n952/952 - 6s - 7ms/step - accuracy: 0.9808 - loss: 0.0733 - val_accuracy: 0.9875 - val_loss: 0.0454\nEpoch 8/50\n952/952 - 6s - 7ms/step - accuracy: 0.9888 - loss: 0.0423 - val_accuracy: 0.9792 - val_loss: 0.0799\n","output_type":"stream"}]},{"cell_type":"code","source":"metrics = pd.DataFrame(model.history.history)\nmetrics","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:32:50.217928Z","iopub.execute_input":"2024-08-10T19:32:50.218297Z","iopub.status.idle":"2024-08-10T19:32:50.242320Z","shell.execute_reply.started":"2024-08-10T19:32:50.218270Z","shell.execute_reply":"2024-08-10T19:32:50.241463Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"   accuracy      loss  val_accuracy  val_loss\n0  0.724614  0.920727      0.930958  0.208443\n1  0.955402  0.135203      0.970268  0.092174\n2  0.974384  0.077359      0.966398  0.108372\n3  0.982348  0.054778      0.981801  0.057472\n4  0.980837  0.063956      0.959693  0.149368\n5  0.984401  0.053716      0.992069  0.025587\n6  0.980821  0.073260      0.987471  0.045420\n7  0.988818  0.042319      0.979195  0.079938","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>accuracy</th>\n      <th>loss</th>\n      <th>val_accuracy</th>\n      <th>val_loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.724614</td>\n      <td>0.920727</td>\n      <td>0.930958</td>\n      <td>0.208443</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.955402</td>\n      <td>0.135203</td>\n      <td>0.970268</td>\n      <td>0.092174</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.974384</td>\n      <td>0.077359</td>\n      <td>0.966398</td>\n      <td>0.108372</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.982348</td>\n      <td>0.054778</td>\n      <td>0.981801</td>\n      <td>0.057472</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.980837</td>\n      <td>0.063956</td>\n      <td>0.959693</td>\n      <td>0.149368</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.984401</td>\n      <td>0.053716</td>\n      <td>0.992069</td>\n      <td>0.025587</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0.980821</td>\n      <td>0.073260</td>\n      <td>0.987471</td>\n      <td>0.045420</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.988818</td>\n      <td>0.042319</td>\n      <td>0.979195</td>\n      <td>0.079938</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"def plot_history(history, model_name):\n    \n    plt.figure(figsize=(12, 4))\n    plt.subplot(1, 2, 1)\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.title(f'{model_name} Accuracy')\n    plt.ylabel('Accuracy')\n    plt.xlabel('Epoch')\n    plt.legend(['Train', 'Validation'], loc='upper left')\n\n    plt.subplot(1, 2, 2)\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title(f'{model_name} Loss')\n    plt.ylabel('Loss')\n    plt.xlabel('Epoch')\n    plt.legend(['Train', 'Validation'], loc='upper left')\n    \n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:34:11.521033Z","iopub.execute_input":"2024-08-10T19:34:11.521771Z","iopub.status.idle":"2024-08-10T19:34:11.529109Z","shell.execute_reply.started":"2024-08-10T19:34:11.521740Z","shell.execute_reply":"2024-08-10T19:34:11.528075Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"plot_history(hist,model)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:34:21.855169Z","iopub.execute_input":"2024-08-10T19:34:21.855542Z","iopub.status.idle":"2024-08-10T19:34:22.352533Z","shell.execute_reply.started":"2024-08-10T19:34:21.855513Z","shell.execute_reply":"2024-08-10T19:34:22.351752Z"},"trusted":true},"execution_count":55,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x400 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"model.evaluate(X_test,Y_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:39:54.422029Z","iopub.execute_input":"2024-08-10T19:39:54.422390Z","iopub.status.idle":"2024-08-10T19:39:59.212447Z","shell.execute_reply.started":"2024-08-10T19:39:54.422362Z","shell.execute_reply":"2024-08-10T19:39:59.211482Z"},"trusted":true},"execution_count":64,"outputs":[{"name":"stdout","text":"\u001b[1m816/816\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.9779 - loss: 0.0891\n","output_type":"stream"},{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"[0.6206479072570801, 0.9785823822021484]"},"metadata":{}}]},{"cell_type":"code","source":"from keras.models import load_model\nmodel.save('model.h5')","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:42:00.630364Z","iopub.execute_input":"2024-08-10T19:42:00.631129Z","iopub.status.idle":"2024-08-10T19:42:00.685211Z","shell.execute_reply.started":"2024-08-10T19:42:00.631094Z","shell.execute_reply":"2024-08-10T19:42:00.684419Z"},"trusted":true},"execution_count":65,"outputs":[]},{"cell_type":"code","source":"import pickle\n\n# save the iris classification model as a pickle file\nmodel_pkl_file = \"model.pkl\"  \n\nwith open(model_pkl_file, 'wb') as file:  \n    pickle.dump(model, file)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:44:30.965487Z","iopub.execute_input":"2024-08-10T19:44:30.965914Z","iopub.status.idle":"2024-08-10T19:44:31.025718Z","shell.execute_reply.started":"2024-08-10T19:44:30.965884Z","shell.execute_reply":"2024-08-10T19:44:31.024941Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z','del','nothing','space']","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:53:47.931526Z","iopub.execute_input":"2024-08-10T19:53:47.932554Z","iopub.status.idle":"2024-08-10T19:53:47.937669Z","shell.execute_reply.started":"2024-08-10T19:53:47.932516Z","shell.execute_reply":"2024-08-10T19:53:47.936682Z"},"trusted":true},"execution_count":75,"outputs":[]},{"cell_type":"code","source":"import cv2\nimport numpy as np\n\n# Load and resize the image\nimg1 = cv2.imread('/kaggle/input/asl-alphabet/asl_alphabet_test/asl_alphabet_test/A_test.jpg')\nimg_resized = cv2.resize(img1, (64,64))\n\n# Normalize the image\nimg_resized = img_resized / 255.0\n\n# Add a batch dimension (1, 64, 64, 3)\nimg_resized = np.expand_dims(img_resized, axis=0)\n\n# Perform the prediction\nprediction = model.predict(img_resized).argmax(axis=1)[0]\n\n# Output the predicted class\nprint(\"Predicted class:\", alphabet[prediction])","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:53:48.653283Z","iopub.execute_input":"2024-08-10T19:53:48.653665Z","iopub.status.idle":"2024-08-10T19:53:48.723045Z","shell.execute_reply.started":"2024-08-10T19:53:48.653621Z","shell.execute_reply":"2024-08-10T19:53:48.722067Z"},"trusted":true},"execution_count":76,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step\nPredicted class: A\n","output_type":"stream"}]},{"cell_type":"code","source":"img1 = cv2.imread('/kaggle/input/asl-alphabet/asl_alphabet_test/asl_alphabet_test/H_test.jpg')\nimg_resized = cv2.resize(img1, (64,64))\n\n# Normalize the image\nimg_resized = img_resized / 255.0\n\n# Add a batch dimension (1, 64, 64, 3)\nimg_resized = np.expand_dims(img_resized, axis=0)\n\n# Perform the prediction\nprediction = model.predict(img_resized).argmax(axis=1)[0]\n\n# Output the predicted class\nprint(\"Predicted class:\", alphabet[prediction])","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:53:48.827400Z","iopub.execute_input":"2024-08-10T19:53:48.827857Z","iopub.status.idle":"2024-08-10T19:53:48.893697Z","shell.execute_reply.started":"2024-08-10T19:53:48.827829Z","shell.execute_reply":"2024-08-10T19:53:48.892814Z"},"trusted":true},"execution_count":77,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step\nPredicted class: H\n","output_type":"stream"}]},{"cell_type":"code","source":"img1 = cv2.imread('/kaggle/input/asl-alphabet/asl_alphabet_test/asl_alphabet_test/nothing_test.jpg')\nimg_resized = cv2.resize(img1, (64,64))\n\n# Normalize the image\nimg_resized = img_resized / 255.0\n\n# Add a batch dimension (1, 64, 64, 3)\nimg_resized = np.expand_dims(img_resized, axis=0)\n\n# Perform the prediction\nprediction = model.predict(img_resized).argmax(axis=1)[0]\n\n# Output the predicted class\nprint(\"Predicted class:\", alphabet[prediction])","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:53:49.032083Z","iopub.execute_input":"2024-08-10T19:53:49.033014Z","iopub.status.idle":"2024-08-10T19:53:49.098887Z","shell.execute_reply.started":"2024-08-10T19:53:49.032976Z","shell.execute_reply":"2024-08-10T19:53:49.097977Z"},"trusted":true},"execution_count":78,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step\nPredicted class: nothing\n","output_type":"stream"}]},{"cell_type":"code","source":"img1 = cv2.imread('/kaggle/input/asl-alphabet/asl_alphabet_test/asl_alphabet_test/space_test.jpg')\nimg_resized = cv2.resize(img1, (64,64))\n\n# Normalize the image\nimg_resized = img_resized / 255.0\n\n# Add a batch dimension (1, 64, 64, 3)\nimg_resized = np.expand_dims(img_resized, axis=0)\n\n# Perform the prediction\nprediction = model.predict(img_resized).argmax(axis=1)[0]\n\n# Output the predicted class\nprint(\"Predicted class:\", alphabet[prediction])","metadata":{"execution":{"iopub.status.busy":"2024-08-10T19:53:49.211964Z","iopub.execute_input":"2024-08-10T19:53:49.212315Z","iopub.status.idle":"2024-08-10T19:53:49.281755Z","shell.execute_reply.started":"2024-08-10T19:53:49.212286Z","shell.execute_reply":"2024-08-10T19:53:49.280691Z"},"trusted":true},"execution_count":79,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step\nPredicted class: space\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}